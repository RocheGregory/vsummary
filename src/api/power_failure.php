<pre>
<?php

$vc_id="none";
if ( isset($_GET['vcid']) ) {
  $vc_id=$_GET['vcid'];
}

$mode="power_on";
if ( isset($_GET['mode']) ) {
  $mode=$_GET['mode'];
}

if ( $mode != "power_off" ) {
  $mode="power_on";
}

// functions required
function select_vms($vc_id, $power_state){
    try {
        // grab the pdo object declared outside of this function
        global $pdo;
        // start transaction
        //$pdo->beginTransaction();
        // prepare statement to avoid sql injections
        $stmt = $pdo->prepare('SELECT name, moref FROM vm WHERE vcenter_id=:vcid AND power_state=:powerstate AND present=1');
        $stmt->bindParam(':vcid', $vc_id, PDO::PARAM_STR);
        $stmt->bindParam(':powerstate', $power_state, PDO::PARAM_STR);
        // execute prepared statement
        $stmt->execute();
        // return results
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // rollback transaction on error
        $pdo->rollback();
        // return 500
        echo "error executing query: ".$e->getMessage();
        http_response_code(500);
    }
}

function select_vcenters(){
    try {
        // grab the pdo object declared outside of this function
        global $pdo;
        // start transaction
        //$pdo->beginTransaction();
        // prepare statement to avoid sql injections
        $stmt = $pdo->prepare('SELECT id, fqdn, short_name FROM vcenter');
        // execute prepared statement
        $stmt->execute();
        // return results
        return $stmt->fetchAll(PDO::FETCH_ASSOC);
    } catch (PDOException $e) {
        // rollback transaction on error
        $pdo->rollback();
        // return 500
        echo "error executing query: ".$e->getMessage();
        http_response_code(500);
    }
}

function get_vcenter($vc_id, $vc_array) {
  $vc = [];
  foreach ($vc_array as $vcenter) {
    if ( strcmp($vcenter['id'], $vc_id) == 0 ){
      $vc = $vcenter;
    }
  }
  return $vc;
}


// START MAIN ------------------------------------------------------------------

// Load MYSQL connection details
require_once( 'lib/mysql_config.php' );
// set up PDO
try {
    $dsn = "mysql:host={$sql_details['host']};dbname={$sql_details['db']};charset={$sql_details['charset']}";
    $opt = [
        PDO::ATTR_ERRMODE            => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
        PDO::ATTR_EMULATE_PREPARES   => false,
    ];
    $pdo = new PDO($dsn, $sql_details['user'], $sql_details['pass'], $opt);
}
catch (PDOException $e) {
    // return 500
    echo "error connecting to database: ".$e->getMessage();
    http_response_code(500);
}

echo <<<EOL
#
# This vmware PowerCli script is auto generated by vsummary.
# The purpose of this powershell script is to power on (or off) all VMs which were previously on.
# USE WITH CAUTION AND IN THE EVENT OF A POWER OUTAGE!
#
# DEFAULT MODE IS: power_on
# to switch to power_off mode, call this page with querystring mode=power_off
# example: http(s)://<VSUMMARY_URL>>/api/power_failure.php?vcid=<ID_OF_VCENTER>&mode=power_off
#
# NOTICE WHEN IN power_off MODE:
# !! YOU MUST REMOVE THE TWO LINES WHICH POWEROFF THE VCENTER VM IF THE VCENTER VM IS PART OF THE LIST !!
#

# AVAILABLE VCENTER SERVERS:

EOL;

$vcenters = select_vcenters();
foreach ($vcenters as $vcenter) {
  echo "#   ${vcenter['short_name']} ${vcenter['fqdn']} <a href=?vcid=${vcenter['id']}>${vcenter['id']}</a> \n";
}

if ( $vc_id == "none" ) {
  echo "\n# ^^ CLICK ON AN AVAILABLE VCENTER LINK ABOVE TO OUTPUT SCRIPT ^^";
  http_response_code(200);
  exit(0);
}

echo "\n\n\n";
$vc = get_vcenter($vc_id, $vcenters);

if ( !isset( $vc['id'] ) ) {
  echo "\n# ^^ ERROR ON SELECTION. CLICK ON AN AVAILABLE VCENTER LINK ABOVE TO OUTPUT SCRIPT ^^";
  http_response_code(200);
  exit(0);
}

$vms = select_vms($vc_id, "poweredOn");
$vms_total = count($vms);

echo "# TARGET MODE: $mode \n";
echo "# TARGET VCENTER: \n#   short_name: ${vc['short_name']}\n#   fqdn: ${vc['fqdn']}\n#   id: ${vc['id']} \n\n";

if ( $vms_total < 1 ) {
  echo "\n# !! THE TARGET VCENTER HAD NO VMS TO POWER ON DURING LAST POLL !!";
  http_response_code(200);
  exit(0);
}

echo <<<EOL

#
#  Functions
#

Function Broadcast_Msg ( [string]\$message ) {
  Write-Host "===================================================="
  Write-Host "  \$message"
  Write-Host "===================================================="
}

Function Connect-to-vcenter( [string]\$vcenter ) {
  Set-PowerCLIConfiguration -InvalidCertificateAction Ignore -Confirm:\$false
  \$c = Connect-VIServer \$vcenter

  if (\$c){
      Write-Host "Successfully Connected to \$vcenter"
  } Else {
      Write-Host "Could not connect to \$vcenter"
      Exit
  }
}

Function Disconnect-from-All-vcenters() {
  if (\$global:DefaultVIServers.Count -gt 0) {
      Disconnect-VIServer -Server * -Force -Confirm:\$false
  }
}

Function PowerOn-VM( [string]\$moref ) {
  \$vm = Get-VM -Id \$moref
  if (\$vm.PowerState -ne "PoweredOn") {
    Start-VM -VM \$vm -Confirm:\$false
  } else {
    Write-Host "VM is already on. Skipping..."
  }
}

Function ShutDown-VM-Gracefully( [string]\$moref, [string]\$waitSec ) {
  \$vm = Get-VM -Id \$moref
  if (\$vm.PowerState -eq "PoweredOn") {
    Stop-VMGuest -VM \$vm -Confirm:\$false
    Write-Host "Waiting \$time_to_wait_for_shutdown seconds for graceful shutdown before procceeding to next VM..."
    Start-Sleep -s \$waitSec
  } else {
    Write-Host "VM is already off. Skipping..."
  }
}

Function ShutDown-VM-Forcefully( [string]\$moref ) {
  \$vm = Get-VM -Id \$moref
  if (\$vm.PowerState -eq "PoweredOn") {
    Stop-VM -VM \$vm -Kill -Confirm:\$false
  } else {
    Write-Host "VM is already off. Skipping..."
  }
}

#
#  Main
#

\$time_to_wait_for_shutdown = 5
\$scriptMode = "${mode}"

if (\$scriptMode -eq 'power_off') {
  Broadcast_Msg "!! POWER OFF MODE DETECTED !!"
  Write-Host "YOU MUST REMOVE THE TWO LINES WHICH POWEROFF THE VCENTER VM IF THE VCENTER VM IS PART OF THIS SCRIPT!!"
  Write-Host "FAILURE TO DO SO WILL RESULT IN THIS SCRIPT NOT COMPLETING!!"
}
\$proceed = Read-Host "Operation $mode on $vms_total VM(s) on ${vc['fqdn']} [${vc['short_name']}]. Are you sure? (y/n)"
if (\$proceed -ne 'y') {
  Exit
}

Broadcast_Msg "Terminating vCenter Connections (if any)"
Disconnect-from-All-vcenters

Broadcast_Msg "Connecting to vCenter: ${vc['fqdn']} [${vc['short_name']}]"
Connect-to-vcenter "${vc['fqdn']}"

# $mode THE VMS (Total VMs: $vms_total)


EOL;


foreach ($vms as $vm) {
  echo "# VM NAME: ${vm['name']}\n";
  if ( $mode == "power_on" ) {
    echo "Broadcast_Msg \"Powering On VM: ${vm['name']}\"\n";
    echo "PowerOn-VM \"VirtualMachine-${vm['moref']}\" \n\n";
  } elseif ( $mode == "power_off" ) {
    echo "Broadcast_Msg \"Powering DOWN VM Gracefully: ${vm['name']}\"\n";
    echo "ShutDown-VM-Gracefully \"VirtualMachine-${vm['moref']}\" \$time_to_wait_for_shutdown \n\n";
  }
}

# do another loop for VMs that did not power down gracefully
if ( $mode == "power_off" ) {
  echo "\n\n\n\n";
  foreach ($vms as $vm) {
    echo "# VM NAME: ${vm['name']}\n";
    echo "Broadcast_Msg \"Powering DOWN VM FORCEFULLY: ${vm['name']}\"\n";
    echo "ShutDown-VM-Forcefully \"VirtualMachine-${vm['moref']}\" \n\n";
  }
}

echo 'Broadcast_Msg "Script Has Completed"';
echo "\n### END ###";
